{{#imports}}
package {{pkg}}

import spock.lang.Specification;
import com.fasterxml.jackson.core.type.TypeReference;
import com.alibaba.ttl.threadpool.agent.TtlAgent;
import com.zte.sputnik.Sputnik;
import com.zte.sputnik.extension.BMRuleLoader
import org.jboss.byteman.contrib.bmunit.BMRule
import org.jboss.byteman.contrib.bmunit.BMRules
import org.jboss.byteman.contrib.bmunit.BMUnitConfig
import org.junit.Rule
import com.zte.sputnik.extension.InvokeStaicHelper
{{/imports}}


/**
*   http://spockframework.org/
*/
class {{className}} extends Specification {

{{#hasStaticInvoke}}
    @Rule
    BMRuleLoader ruleLoader = new BMRuleLoader();



    @BMRules(rules = [
        {{#staticNames}}
            @BMRule(
                name = "invoke_static:{{value.ownerName}}::{{value.erased}}@{{pkg}}.{{className}}",
                targetClass = "{{value.ownerName}}",
                targetMethod = "{{value.erased}}",
                binding = 'mockHandler:{{pkg}}.{{className}}$StaticStub{{value.mid}}=getMock("{{value.ownerName}}::{{value.erased}}@{{pkg}}.{{className}}")',
                targetLocation = "AT ENTRY",
                helper='com.zte.sputnik.extension.InvokeStaicHelper',
                condition = 'hasMethod("{{value.ownerName}}::{{value.erased}}@{{pkg}}.{{className}}")',
                action = 'return mockHandler.{{value.name}}({{value.argRefs}})'
            ),
        {{/staticNames}}
    ])
{{/hasStaticInvoke}}


void 'verify method:{{signature}}'() {
given:
{{subjectDecl}}
{{#fieldsInitBlock}}
    {{.}}
{{/fieldsInitBlock}}
{{#hasStaticInvoke}}
    def invokeStaticDefs=[:]
{{/hasStaticInvoke}}


{{#mockArgs}}
    def argMockDefs=[:]
{{/mockArgs}}
{{#mockBlock}}
    {{.}}
{{/mockBlock}}

{{#hasStaticInvoke}}
    InvokeStaicHelper.setupMock(invokeStaticDefs)
{{/hasStaticInvoke}}
when:
{{actionDecl}}
then:
{{assertDecl}}
{{#hasStaticInvoke}}
cleanup:
    InvokeStaicHelper.cleanup(invokeStaticDefs)
{{/hasStaticInvoke}}
}

{{#staticInvokes}}
   private static interface StaticStub{{key}}{
        {{#value}}
            {{.}}
        {{/value}}
    }
{{/staticInvokes}}
{{#Inputs}}
    static final def INPUTS{{key}}= [
    {{#value}}
        {{ident}}{{tokens}}{{lineEnd}}
    {{/value}}
    ]
{{/Inputs}}

{{#Outputs}}
    static final def OUTPUTS{{key}}= [
    {{#value}}
        {{ident}}{{tokens}}{{lineEnd}}
    {{/value}}
    ]
{{/Outputs}}

{{#Returned}}
    static final def RETURNED{{key}}= {{#value}}
        {{ident}}{{tokens}}{{lineEnd}}
    {{/value}}
{{/Returned}}
}


