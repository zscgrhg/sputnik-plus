{{#imports}}
package {{pkg}}

import spock.lang.Specification;
import com.fasterxml.jackson.core.type.TypeReference;
import com.alibaba.ttl.threadpool.agent.TtlAgent;
import com.zte.sputnik.Sputnik;
import com.zte.sputnik.extension.BMRuleLoader
import org.jboss.byteman.contrib.bmunit.BMRule
import org.jboss.byteman.contrib.bmunit.BMRules
import org.jboss.byteman.contrib.bmunit.BMUnitConfig
import org.junit.Rule
import com.zte.sputnik.config.StaticInvoker
{{/imports}}


/**
*   http://spockframework.org/
*/
class {{className}} extends Specification {

{{#hasStaticInvoke}}
    @Rule
    BmUnitRule bmUnitRule = new BmUnitRule();

    def setupSpec(){
        if (TtlAgent.firstLoad) {
            Sputnik.loadTtlAgent();
        }
    }

    def cleanupSpec(){
        com.zte.sputnik.config.StaticInvoker.cleanup()
    }

    @BMUnitConfig(verbose = true, bmunitVerbose = true, debug = true)
    @BMRules(rules = [
        {{#staticNames}}
            @BMRule(
                name = "invoke_static:{{value.ownerName}}::{{value.erased}}",
                targetClass = "{{value.ownerName}}",
                targetMethod = "{{value.erased}}",
                binding = 'mockHandler:{{pkg}}.{{className}}$StaticStub{{value.mid}}=com.zte.sputnik.config.StaticInvoker.getMock("{{value.ownerName}}::{{value.erased}}")',
                targetLocation = "AT ENTRY",
                condition = 'com.zte.sputnik.config.StaticInvoker.hasMethod("{{value.ownerName}}::{{value.erased}}")',
                action = 'return mockHandler.{{value.name}}({{value.argRefs}})'
            ),
        {{/staticNames}}
    ])
{{/hasStaticInvoke}}


void verify{{method}}() {
given:
{{#hasStaticInvoke}}
    def invokeStaticDefs=[:]
    StaticInvoker.setupMock(invokeStaticDefs)
{{/hasStaticInvoke}}
{{subjectDecl}}
{{#mockArgs}}
    def argMockDefs=[:]
{{/mockArgs}}
{{#mockBlock}}
    {{.}}
{{/mockBlock}}
when:
{{actionDecl}}
then:
{{assertDecl}}
}

{{#staticInvokes}}
   private static interface StaticStub{{key}}{
        {{#value}}
            {{.}}
        {{/value}}
    }
{{/staticInvokes}}
{{#Inputs}}
    static final def INPUTS{{key}}= [
    {{#value}}
        {{ident}}{{tokens}}{{lineEnd}}
    {{/value}}
    ]
{{/Inputs}}

{{#Outputs}}
    static final def OUTPUTS{{key}}= [
    {{#value}}
        {{ident}}{{tokens}}{{lineEnd}}
    {{/value}}
    ]
{{/Outputs}}

{{#Returned}}
    static final def RETURNED{{key}}= {{#value}}
        {{ident}}{{tokens}}{{lineEnd}}
    {{/value}}
{{/Returned}}
}


